import logging
import os
import yfinance as yf
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# Ø¥Ø¹Ø¯Ø§Ø¯ Ø§Ù„Ø¨ÙˆØª
TELEGRAM_BOT_TOKEN = "123456789:ABCdefGHIjklMNOpqrSTUvwxYZ12345678"


# Ø§Ù„Ø³Ø¬Ù„
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# Ø£ÙˆØ§Ù…Ø± Ø§Ù„Ø¨ÙˆØª
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Ù…Ø±Ø­Ø¨Ø§Ù‹! Ø£Ø±Ø³Ù„ /stock <Ø±Ù…Ø² Ø§Ù„Ø³Ù‡Ù…> Ù„Ù„Ø­ØµÙˆÙ„ Ø¹Ù„Ù‰ Ø³Ø¹Ø±Ù‡.")

async def stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø¥Ø¯Ø®Ø§Ù„ Ø±Ù…Ø² Ø§Ù„Ø³Ù‡Ù… Ù…Ø«Ù„: /stock AAPL")
        return
    symbol = context.args[0].upper()
    try:
        data = yf.Ticker(symbol)
        price = data.info['regularMarketPrice']
        name = data.info.get('shortName', symbol)
        await update.message.reply_text(f"ðŸ“ˆ {name} ({symbol})\nØ§Ù„Ø³Ø¹Ø± Ø§Ù„Ø­Ø§Ù„ÙŠ: ${price}")
    except Exception as e:
        await update.message.reply_text("Ø­Ø¯Ø« Ø®Ø·Ø£. ØªØ£ÙƒØ¯ Ù…Ù† Ø±Ù…Ø² Ø§Ù„Ø³Ù‡Ù… ÙˆØ£Ø¹Ø¯ Ø§Ù„Ù…Ø­Ø§ÙˆÙ„Ø©.")

# ØªØ´ØºÙŠÙ„ Ø§Ù„Ø¨ÙˆØª
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stock", stock))
    app.run_polling()
